/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 480, 272);
    box1.setColor(touchgfx::Color::getColorFromRGB(107, 129, 255));
    add(box1);

    textureMapper2.setXY(-60, -364);
    textureMapper2.setBitmap(touchgfx::Bitmap(BITMAP_HORIZONTE_ARTIFICIAL_FRONT_V3_ID));
    textureMapper2.setWidth(599);
    textureMapper2.setHeight(1000);
    textureMapper2.setBitmapPosition(-0.5f, 0.0f);
    textureMapper2.setScale(1.0f);
    textureMapper2.setCameraDistance(1000.0f);
    textureMapper2.setOrigo(299.5f, 500.0f, 1000.0f);
    textureMapper2.setCamera(299.5f, 500.0f);
    textureMapper2.setAngles(0.0f, 0.0f, 0.0f);
    textureMapper2.setRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
    add(textureMapper2);

    textArea1.setPosition(-1, 136, 100, 24);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 106));
    textArea1.setLinespacing(0);
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JBJZ).getText());
    textArea1.setWildcard(textArea1Buffer);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KKMT));
    add(textArea1);

    textArea2.setPosition(386, 136, 100, 24);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 255, 106));
    textArea2.setLinespacing(0);
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XSLJ).getText());
    textArea2.setWildcard(textArea2Buffer);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CXO7));
    add(textArea2);

    image2.setXY(5, 136);
    image2.setBitmap(touchgfx::Bitmap(BITMAP_BOX_ID));
    add(image2);

    image2_1.setXY(395, 136);
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_BOX_ID));
    add(image2_1);

    image3.setXY(189, 86);
    image3.setBitmap(touchgfx::Bitmap(BITMAP_ARTIFICIAL_PLANE_V2_ID));
    add(image3);

    slideMenu1.setXY(0, 0);
    slideMenu1.setup(touchgfx::SlideMenu::EAST,
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        touchgfx::Bitmap(BITMAP_LEFT_SLIDE_MENU_BUTTON_ID),
        0, 0, 50, 0);
    slideMenu1.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenu1.setVisiblePixelsWhenCollapsed(25);
    slideMenu1.setHiddenPixelsWhenExpanded(0);
    slideMenu1.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenu1.setAnimationDuration(18);
    slideMenu1.setExpandedStateTimeout(180);
    FPS.setXY(-1, 198);
    FPS.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID), touchgfx::Bitmap(BITMAP_SQUARE_ID));
    FPS.setAction(buttonCallback);
    slideMenu1.add(FPS);

    textAreaFPS.setXY(4, 210);
    textAreaFPS.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textAreaFPS.setLinespacing(0);
    textAreaFPS.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7O3F));
    slideMenu1.add(textAreaFPS);

    LND.setXY(-1, 148);
    LND.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID), touchgfx::Bitmap(BITMAP_SQUARE_ID));
    LND.setAction(buttonCallback);
    slideMenu1.add(LND);

    textArea3.setXY(4, 160);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QDA1));
    slideMenu1.add(textArea3);

    ENG.setXY(-1, 98);
    ENG.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID), touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID));
    ENG.setLabelText(touchgfx::TypedText(T___SINGLEUSE_6JJE));
    ENG.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ENG.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ENG.setAction(buttonCallback);
    slideMenu1.add(ENG);

    NAV.setXY(-1, 49);
    NAV.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID), touchgfx::Bitmap(BITMAP_MENU_TOGGLE_BUTTON_01_ID));
    NAV.setLabelText(touchgfx::TypedText(T___SINGLEUSE_2K4S));
    NAV.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    NAV.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    NAV.setAction(buttonCallback);
    slideMenu1.add(NAV);

    HOR.setXY(-1, -1);
    HOR.setBitmaps(touchgfx::Bitmap(BITMAP_SQUARE_ID), touchgfx::Bitmap(BITMAP_SQUARE_ID));
    HOR.setLabelText(touchgfx::TypedText(T___SINGLEUSE_R2HZ));
    HOR.setLabelColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    HOR.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    slideMenu1.add(HOR);

    add(slideMenu1);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &NAV)
    {
        //Interaction1
        //When NAV clicked change screen to Screen2
        //Go to Screen2 with screen transition towards North
        application().gotoScreen2ScreenCoverTransitionNorth();
        //Interaction2
        //When NAV clicked reset timer slideMenu1
        //reset expanded state timer on slideMenu1
        slideMenu1.resetExpandedStateTimer();
    }
    if (&src == &ENG)
    {
        //Interaction3
        //When ENG clicked change screen to Screen3
        //Go to Screen3 with screen transition towards North
        application().gotoScreen3ScreenSlideTransitionNorth();
        //Interaction4
        //When ENG clicked reset timer slideMenu1
        //reset expanded state timer on slideMenu1
        slideMenu1.resetExpandedStateTimer();
    }
    if (&src == &LND)
    {
        //Interaction5
        //When LND clicked call virtual function
        //Call GetLandingState
        GetLandingState();
    }
    if (&src == &FPS)
    {
        //Interaction6
        //When FPS clicked call virtual function
        //Call showFPS
        showFPS();
    }
}
